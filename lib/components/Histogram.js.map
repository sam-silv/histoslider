{"version":3,"sources":["../../src/components/Histogram.js"],"names":["histogramStyle","display","Histogram","bucket","props","onChange","start","end","data","bucketSize","sorted","sort","buckets","s","i","max","values","push","length","innerHeight","height","padding","bucketWidth","innerWidth","selection","style","showOnDrag","position","left","right","backgroundColor","border","borderBottom","bottom","Object","assign","width","map","opacity","histogramPadding","barBorderRadius","selectionColor","selectBucket","bind","reset","cursor","propTypes","arrayOf","number","isRequired","string","bool","func","defaultProps"],"mappings":"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","file":"Histogram.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { ascending } from 'd3-array'\n\nconst histogramStyle = {\n  display: 'block'\n}\n\nexport default class Histogram extends Component {\n\n  selectBucket (bucket) {\n    this.props.onChange([bucket.start, bucket.end])\n  }\n\n  bucket (data, start, end, bucketSize) {\n    const sorted = data.sort(ascending)\n    let buckets = []\n    let s = start\n    let i = 0\n    let max = 0\n\n    while (s < (end)) {\n      let values = []\n\n      while (sorted[i] < (s + bucketSize)) {\n        if (sorted[i] < start) continue\n        values.push(data[i])\n        i++\n      }\n\n      buckets.push({\n        start: s,\n        end: s + bucketSize,\n        values\n      })\n      max = values.length > max ? values.length : max\n\n      s += bucketSize\n    }\n\n    return {\n      buckets,\n      max\n    }\n  }\n\n  render () {\n    const innerHeight = this.props.height - this.props.padding\n    const { buckets, max } = this.bucket(this.props.data, this.props.start, this.props.end, this.props.bucketSize)\n    const bucketWidth = this.props.innerWidth / buckets.length\n    const selection = this.props.selection\n\n    let style = this.props.showOnDrag ? { position: 'absolute', left: '-1px', right: '-1px', backgroundColor: '#fafafa', border: '1px solid #eaeaea', borderBottom: 'none', bottom: 'calc(100% - ' + this.props.padding + 'px)' } : {}\n\n\n    return (\n      <div>\n        <svg style={Object.assign({}, style, histogramStyle)} width={this.props.width} height={this.props.height}>\n          <g transform={'translate(' + this.props.padding + ',' + this.props.height + ')'}>\n            <g transform='scale(1,-1)'>\n            {\n              buckets.map((bucket, i) => {\n                let opacity = 0\n\n                if (selection[0] > bucket.end || selection[1] < bucket.start) {\n                  opacity = 0\n                } else if (selection[0] <= bucket.start && selection[1] >= bucket.end) {\n                  // Entire block is covered\n                  opacity = 1\n                } else if (selection[0] > bucket.start && selection[1] > bucket.end) {\n                  opacity = 1 - (selection[0] - bucket.start) / (bucket.end - bucket.start)\n                  // Some of left block is covered\n                } else if (selection[1] < bucket.end && selection[0] < bucket.start) {\n                  // Some of right block is covered\n                  opacity = (selection[1] - bucket.start) / (bucket.end - bucket.start)\n                } else {\n                  // Parital match\n                  opacity = (selection[1] - selection[0]) / (bucket.end - bucket.start)\n                }\n\n                return (\n                  <g key={i} transform={'translate(' + (i * bucketWidth) + ', 0)'}>\n                    <rect\n                      fill='#f1f1f1'\n                      width={bucketWidth - this.props.histogramPadding}\n                      height={(bucket.values.length / max) * innerHeight}\n                      rx={this.props.barBorderRadius}\n                      ry={this.props.barBorderRadius}\n                      x={this.props.histogramPadding / 2}\n                    />\n                    <rect\n                      fill={this.props.selectionColor}\n                      onClick={this.selectBucket.bind(this, bucket)}\n                      onDoubleClick={this.props.reset.bind(this)}\n                      style={{ opacity, cursor: 'pointer' }}\n                      width={bucketWidth - this.props.histogramPadding}\n                      height={(bucket.values.length / max) * innerHeight}\n                      rx={this.props.barBorderRadius}\n                      ry={this.props.barBorderRadius}\n                      x={this.props.histogramPadding / 2}\n                    />\n                  </g>\n                )\n              })\n            }\n            </g>\n          </g>\n        </svg>\n      </div>\n    )\n  }\n}\n\nHistogram.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.number).isRequired,\n  selection: PropTypes.arrayOf(PropTypes.number).isRequired,\n  start: PropTypes.number,\n  end: PropTypes.number,\n  bucketSize: PropTypes.number,\n  width: PropTypes.number,\n  innerWidth: PropTypes.number,\n  height: PropTypes.number,\n  padding: PropTypes.number,\n  selectionColor: PropTypes.string,\n  histogramPadding: PropTypes.number,\n  showOnDrag: PropTypes.bool,\n  reset: PropTypes.func,\n  onChange: PropTypes.func,\n  barBorderRadius: PropTypes.number\n}\n\nHistogram.defaultProps = {\n  barBorderRadius: 0,\n  histogramPadding: 1\n}\n"]}